{"version":3,"sources":["files/Question.js","files/Awnser.js","files/JokeCard.js","files/Header.js","files/Footer.js","App.tsx","files/useFetch.ts","reportWebVitals.ts","index.tsx"],"names":["Question","prefs","className","Awnser","onClick","alert","JokeCard","question","awnser","Header","Footer","url","useState","loading","data","fetchState","setFetchState","useEffect","a","fetch","response","json","test","useFetch","jokes","console","log","map","joke","answer","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAWeA,EATE,SAACC,GAEd,OAAO,qBAAKC,UAAU,WAAf,SACP,4BAAID,EAAMD,cCeCG,EAhBA,SAACF,GAGZ,OAAO,qBAAKC,UAAU,SAAf,SAEH,wBAAQA,UAAU,gBAAgBE,QAGtC,WACIC,MAAMJ,EAAME,SAJZ,4BCsBOG,G,KAtBE,SAACL,GAGd,OAAqB,OAAjBA,EAAME,OACC,qBAAKD,UAAU,YAAf,SAEP,cAAC,EAAD,CAAUF,SAAUC,EAAMM,aAInB,sBAAKL,UAAU,YAAf,UAEP,cAAC,EAAD,CAAUF,SAAUC,EAAMM,WAG1B,cAAC,EAAD,CAAQJ,OAAQF,EAAMO,cCNfC,EAfA,WACX,OAAO,gCACH,qBAAKP,UAAU,SAAf,SACA,mDAEA,uBACA,uBACA,uBACA,uBACA,uBACA,2BCJOQ,EANA,WACX,OAAO,qBAAKR,UAAU,SAAf,SACH,wH,8BCUO,aAAO,IAAD,ECCJ,SAAUS,GAAgB,IAAD,EACFC,mBAAyB,CACzDC,SAAS,EACTC,KAAM,OAH4B,mBAC/BC,EAD+B,KACnBC,EADmB,KAoBpC,OAdFC,qBAAU,YACI,uCAAG,8BAAAC,EAAA,sEACYC,MAAMR,GADlB,cACLS,EADK,gBAEQA,EAASC,OAFjB,OAELP,EAFK,OAGXE,EAAc,CACZH,SAAS,EACTC,SALS,2CAAH,oDASVQ,KACE,IAGG,CACLT,QAASE,EAAWF,QACpBC,KAAMC,EAAWD,MDrBUS,CAAkB,mDAArCC,EAFK,EAEXV,KAAaD,EAFF,EAEEA,QAErB,OAAIW,GAAOC,QAAQC,IAAIF,GAIhB,8BACJX,EAAW,6CAA0B,gCACpC,cAAC,EAAD,IACCW,EAAMG,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAwBrB,SAAUqB,EAAKrB,SAAUC,OAAQoB,EAAKC,QAA/CD,EAAKE,OAEtB,cAAC,EAAD,UARM,yCEPGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2281ebaa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Question = (prefs) => {\n\n    return(<div className=\"question\">\n    <p>{prefs.Question}</p>\n\n</div>)\n    \n}\n\nexport default Question;","import React from \"react\"\n\n\n\nconst Awnser = (prefs) =>  {\n\n    \n    return(<div className=\"awnser\">\n\n        <button className=\"awnser-button\" onClick={ShowAwnser}>Show Answer</button>\n\n    </div>)\n    function ShowAwnser(){\n        alert(prefs.Awnser)\n    }\n    \n}\n\n\n\nexport default Awnser;\n","import React from \"react\";\nimport Question from \"./Question\";\nimport Awnser from \"./Awnser\"\nimport \"./Componets.css\"\n\n\n\n\n\nconst JokeCard = (prefs) => {\n    \n\n    if (prefs.Awnser === null){\n        return(<div className=\"Joke-Card\">\n        \n        <Question Question={prefs.question}/>\n        \n    </div>)\n    }else {\n        return(<div className=\"Joke-Card\">\n        \n        <Question Question={prefs.question}/>\n\n        \n        <Awnser Awnser={prefs.awnser}/> \n        \n    </div>)\n    }\n    \n}\n\nexport default JokeCard;","import React from \"react\"\nimport \"./Componets.css\"\n\nconst Header = () => {\n    return(<div>\n        <div className=\"header\">\n        <h1>Hilarious Jokes</h1>\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        \n    </div>)\n}\n\nexport default Header","import React from \"react\"\nimport './Componets.css'\n\nconst Footer = () => {\n    return(<div className=\"footer\">\n        <p>(c) Jack Mechem - It is simple but I made it with react so thats all that maters. :)</p>\n    </div>)\n}\n\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport JokeCard from './files/JokeCard'\nimport Header from './files/Header'\nimport Footer from './files/Footer'\nimport fetchJokes from './files/useFetch'\nimport useFetch from './files/useFetch';\n\n\n\ninterface IJoke {\n  id: number;\n  question: string;\n  answer: string;\n}\nexport default () => {\n\n  const { data: jokes, loading } = useFetch<IJoke[]>(\"https://vast-hollows-83545.herokuapp.com/jokes/\");\n\n  if (jokes) console.log(jokes)\n          else{ return(\n            <div>ERROR</div>\n          )};\n  return(<div>\n    {loading ? (<div>...loading</div>) : (<div>\n      <Header/>\n      {jokes.map((joke) => \n        <JokeCard key={joke.id} question={joke.question} awnser={joke.answer}/>\n      )}    \n      <Footer/>\n      \n      </div>)}\n  </div>)\n}\n\n\n\n\n\n","import React, { useEffect, useState } from 'react';\n\n\ntype TFetchState<T> = IFetchStateInitial | IFetchStateLoaded<T>\n\ninterface IFetchStateInitial {\n  loading: true\n  data: null\n}\n\ninterface IFetchStateLoaded<T> {\n  loading: false\n  data: T\n}\n\n  \n  export default <T = any>(url:string) => {\n    const [fetchState, setFetchState] = useState<TFetchState<T>>({\n        loading: true,\n        data: null\n      });\n    // Similar to componentDidMount and componentDidUpdate\n    useEffect(() => {\n        const test = async () => {\n          const response = await fetch(url);\n          const data = await response.json();\n          setFetchState({\n            loading: false,\n            data\n          })\n          \n        }\n        test() // needs to be executed\n       }, []);\n    \n  \n      return {\n        loading: fetchState.loading,\n        data: fetchState.data\n      }\n  }\n  \n\n\n\nexport const useFetch = (url: string) => {\n  const [state, setState] = useState({ data: {}, loading: true }); //Don't assign null to state variable\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true })); //Remove this line, this is not needed \n\n    fetch(url)\n      .then(res => res.json())\n      .then(json => setState({ data: json, loading: false }));\n  }, [url, setState]); //Replace [url, setState] with [] as your second argument to make useEffect work for first time.\n\n  return state;\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}